#!/usr/bin/python3

import argparse
import csv
import datetime
import os
import requests
import sys
import tempfile
from whelk import shell

distinfo = '/usr/share/distro-info/ubuntu.csv'

def main():
    p = argparse.ArgumentParser()
    p.add_argument('-r', '--release', default=get_release())
    p.add_argument('-l', '--locale', default='en')
    p.add_argument('-u', '--url', default=False, action='store_true')
    p.add_argument('section', metavar='SECTION', nargs='?')
    p.add_argument('page', metavar='PAGE')
    args = p.parse_args()
    section, page, url = get_manpage(args.release, args.locale, args.section, args.page)
    if not page:
        msg = ' in section %s' % args.section if args.section else ''
        print("No manual entry for %s%s" % (args.page, msg), file=sys.stderr)
        sys.exit(1)
    if args.url:
        print(url.replace('.gz', ''))
        sys.exit(0)
    fd, path = tempfile.mkstemp(prefix='%s.%s.' % (args.page, section))
    try:
        os.write(fd, page)
        shell.man('-l', path, redirect=False)
    finally:
        os.unlink(path)

def get_release():
    if not os.path.exists(distinfo):
        distro, release = shell.lsb_release('-cis').stdout.splitlines()
        if distro != 'Ubuntu':
            return 'xenial'
        return release
    with open(distinfo) as fd:
        releases = list(csv.DictReader(fd))
    today = datetime.datetime.today().strftime('%Y-%m-%d')
    for release in reversed(sorted(releases, key=lambda release: release['release'])):
        if release['release'] < today:
            return release['series']

def get_manpage(release, locale, section, name):
    template = "http://manpages.ubuntu.com/manpages.gz/{release}/{locale}/man{sectionnum}/{name}.{section}.gz"
    sections = [section] if section else [str(x) for x in range(1,10)]
    for section in sections:
        sectionnum = section[0]
        url = template.format(**locals())
        resp = requests.get(url)
        if resp.status_code == 200:
            return section, resp.content, url
    return None, None, None

if __name__ == '__main__':
    main()
