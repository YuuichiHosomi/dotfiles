#!/usr/bin/python
#
# Simple wrapper around SSH to achieve the following:
# - Add keys to a running ssh-agent if no keys have been added yet
# - Set up a controlmaster connection the first time you connect to a host
# - my_ssh -Q kills all controlmaster connections
# Works best with 'alias ssh=my_ssh' in your ~/.bashrc (or the equivalent for
# your shell) and when my_ssh is used in ProxyCommands instead of ssh

import os, sys, subprocess, getopt

# Parse arguments
c_args = ['/usr/bin/ssh','-f','-N','-n']

try:
    (opts, args) = getopt.getopt(sys.argv[1:], 'QP:1246AaCcfgKkMNnqsTtVvXxYb:c:D:e:F:i:L:l:m:O:o:p:R:S:w')
except getopt.GetoptError:
    # Let SSH do the error reporting
    sys.argv[0] = '/usr/bin/ssh'
    os.execve('/usr/bin/ssh', sys.argv, os.environ)

do_lock = False
if ('-1', '') in opts:
    do_lock = True
    sys.argv.remove('-1')

if ('-Q','') in opts:
    import glob, struct, socket
    # Kill all existing ssh controlmasters except the ones we want to keep
    sockets = []
    dont_quit = []
    if opts.count(('-Q','')) == 1:
        if os.path.exists(os.path.expanduser('~/.ssh/dont_quit')):
            fd = open(os.path.expanduser('~/.ssh/dont_quit'))
            for line in fd:
                dont_quit.append(line.strip())
            fd.close()
    fd = open(os.path.expanduser('~/.ssh/config'))
    for line in fd:
        line = line.strip()
        if line.startswith('ControlPath'):
            path = line.split()[1].replace('%h','*').replace('%p','*').replace('%r','*')
            sockets += glob.glob(os.path.expanduser(path))
    fd.close()
    for sock in sockets:
        for match in dont_quit:
            if glob.fnmatch.fnmatch(os.path.basename(sock), match):
                break
        else:
            fd = open('/dev/null','w')
            subprocess.Popen(['/usr/bin/ssh','-O','exit','-oControlPath='+sock,'dummy'], stdout=fd, stderr=fd).wait()
    sys.exit(0)

for o in opts:
    if o[0] == '-P':
        sys.argv.insert(1, '-oProxyCommand=python %s %s nc %%h %%p' % (sys.argv[0], o[1]))
        for i in range(len(sys.argv)):
            if sys.argv[i] == '-P':
                sys.argv.pop(i+i)
                sys.argv.pop(i)
                break
            if sys.argv[i].startswith('-P'):
                sys.argv.pop(i)
                break
        break

for a in 'ADKLRXY':
    if '-' + a in [x[0] for x in opts]:
        # Don't use a controlmaster when requesting any forwarding explicitely
        sys.argv.insert(1, '-oControlPath=none')
        break
else:
    if len(args) and ('-O' not in [x[0] for x in opts]):
        host = args[0]
        c_args += sys.argv[1:sys.argv.index(host)+1]
        # Start the control connection if needed
        fd = open('/dev/null','w')
        if subprocess.Popen(['/usr/bin/ssh','-O','check',host], stdout=fd, stderr=fd).wait():
            try:
                ret = subprocess.Popen(c_args).wait()
                if ret:
                    sys.exit(ret)
            except KeyboardInterrupt:
                sys.exit(130)
        fd.close()

sys.argv[0] = '/usr/bin/ssh'
if do_lock:
    sys.argv.insert(0, os.path.join(os.path.expanduser('~'), '.ssh', 'ssh_lock_' + args[0]))
    sys.argv.insert(0, '-w')
    sys.argv.insert(0, '/usr/bin/lckdo')
    for i in range(len(sys.argv)):
        if sys.argv[i] == '-1':
            sys.argv.pop(i)
            break

# Don't use subprocess here -- we want to replace ourselves
os.execve(sys.argv[0], sys.argv, os.environ)
