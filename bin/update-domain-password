#!/usr/bin/python3

import argparse
import configparser
import getpass
import json
import NetworkManager
import os
import secretstorage
import sys
import urllib.parse

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('domain', help="The domain to update the password for")
    ap.add_argument('--smbdomain', nargs=1, help="SMB domain")
    ap.add_argument('--network', nargs='+', help="Networks")
    args = ap.parse_args()

    domain = args.domain
    ddomain = '.' + domain
    smbdomain = args.smbdomain[0] if args.smbdomain else domain[:domain.find('.')].upper()
    networks = args.network or []

    new = getpass.getpass("New password for %s: " % domain)
    bus = secretstorage.dbus_init()
    collection = secretstorage.get_default_collection(bus)

    # 1. Evolution
    for secret in collection.search_items({'xdg:schema': 'org.gnome.Evolution.Data.Source'}):
        attrs = secret.get_attributes()
        host = get_evolution_host(attrs['e-source-uid'])
        if host and (host == domain or host.endswith(ddomain)):
            print("Updating mail password for %s" % host)
            secret.set_secret(new)

    # 2. SMB shares
    for secret in collection.search_items({'xdg:schema': 'org.gnome.keyring.NetworkPassword', 'protocol': 'SMB', 'domain': smbdomain}):
        attrs = secret.get_attributes()
        print("Updating SMB password for %s" % attrs['server'])
        secret.set_secret(new)

    # 3. NetworkManager
    for conn in NetworkManager.Settings.ListConnections():
        settings = conn.GetSettings()
        if settings['connection']['id'] in networks or \
           settings['connection']['type'] == 'vpn' and settings['vpn']['data']['remote'] in networks or \
           settings['connection']['type'] == '802-11-wireless' and settings['802-11-wireless']['ssid']  in networks:
            print("Updating network password for %s" % settings['connection']['id'])
            secrets = conn.GetSecrets()
            for key in secrets:
                if 'password' in secrets[key]:
                    secrets[key]['password'] = new
                settings[key].update(secrets[key])
            settings = clean_empty_lists(settings)
            conn.Update(settings)

    # 4. Chrome
    prefs = os.path.join(os.path.expanduser('~'), '.config', 'chromium', 'Default', 'Preferences')
    if os.path.exists(prefs):
        with open(prefs) as fd:
            prefs = json.load(fd)
        chrome_id = prefs['profile']['local_profile_id']
        for secret in collection.search_items({'application': 'chrome-%d' % chrome_id}):
            attrs = secret.get_attributes()
            host = urllib.parse.urlparse(attrs['origin_url']).hostname
            if host == domain or host.endswith(ddomain):
                print("Updating chrome password for %s" % host)
                secret.set_secret(new)

    # 5. Firefox
    for secret in collection.search_items({'mozLoginInfoMagic': 'loginInfoMagicv1'}):
        attrs = secret.get_attributes()
        host = urllib.parse.urlparse(attrs['hostname']).hostname
        if host == domain or host.endswith(ddomain):
            print("Updating firefox password for %s" % host)
            secret.set_secret(new)

def get_evolution_host(id):
    cp = configparser.ConfigParser()
    cp.read(os.path.join(os.path.expanduser('~'), '.config', 'evolution', 'sources', id + '.source'))
    if cp.has_section('Authentication'):
        return cp.get('Authentication', 'Host')

def clean_empty_lists(val):
    if isinstance(val, dict):
        for k, v in list(val.items()):
            if v == []:
                del val[k]
            if isinstance(v, dict):
                val[k] = clean_empty_lists(v)
    return val

if __name__ == '__main__':
    main()
